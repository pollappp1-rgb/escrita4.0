<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <title>ESCRITA 4.0 Manager</title>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <style>
    :root{
      --bg:#f6f7fb; --card:#ffffff; --text:#111827; --muted:#6b7280; --primary:#3b82f6;
      --accent:#10b981; --danger:#ef4444; --warning:#f59e0b; --border:#e5e7eb; --shadow:0 2px 8px rgba(0,0,0,.08);
    }
    [data-theme="dark"]{
      --bg:#0b1020; --card:#0f152b; --text:#e5e7eb; --muted:#94a3b8; --primary:#60a5fa;
      --accent:#34d399; --danger:#f87171; --warning:#fbbf24; --border:#1f2a44; --shadow:0 2px 10px rgba(0,0,0,.35);
    }
    html,body{margin:0;padding:0;background:var(--bg);color:var(--text);font-family:Inter,ui-sans-serif,system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif}
    *{box-sizing:border-box}
    header{position:sticky;top:0;z-index:10;background:var(--card);box-shadow:var(--shadow);}
    .bar{display:flex;align-items:center;gap:12px;max-width:1200px;margin:0 auto;padding:10px 16px;}
    .brand{display:flex;align-items:center;gap:12px;flex:1;}
    .brand .logo{width:36px;height:36px;border-radius:8px;background:#e5e7eb;overflow:hidden;border:1px solid var(--border);display:flex;align-items:center;justify-content:center;color:#777}
    .brand h1{font-size:16px;font-weight:700;margin:0;line-height:1.2}
    .brand small{display:block;color:var(--muted);font-weight:500}
    .right{display:flex;gap:8px;align-items:center;}
    .btn{border:1px solid var(--border);background:var(--card);color:var(--text);padding:8px 12px;border-radius:10px;cursor:pointer}
    .btn:hover{filter:brightness(1.02)}
    .btn.primary{background:var(--primary);border-color:transparent;color:white}
    .btn.success{background:var(--accent);border-color:transparent;color:#07130d}
    .btn.danger{background:var(--danger);border-color:transparent;color:white}
    .btn.warning{background:var(--warning);border-color:transparent;color:#14130a}
    .chip{display:inline-block;border:1px solid var(--border);padding:2px 8px;border-radius:999px;color:var(--muted);font-size:12px}
    .container{max-width:1200px;margin:16px auto;padding:0 16px}
    .card{background:var(--card);border:1px solid var(--border);border-radius:14px;box-shadow:var(--shadow);padding:16px}
    .grid{display:grid;gap:16px}
    .grid.cols-2{grid-template-columns:1fr 1fr}
    .grid.cols-3{grid-template-columns:repeat(3,1fr)}
    .grid.resp{grid-template-columns:1fr}
    @media(min-width:900px){.grid.resp{grid-template-columns:1.2fr 1fr}}
    .tabs{display:flex;gap:8px;flex-wrap:wrap;margin-bottom:10px}
    .tab{padding:8px 12px;border-radius:8px;border:1px solid var(--border);cursor:pointer;background:var(--card)}
    .tab.active{background:var(--primary);border-color:transparent;color:#fff}
    .hidden{display:none!important}
    input,select,textarea{width:100%;padding:10px;border-radius:10px;border:1px solid var(--border);background:var(--card);color:var(--text)}
    label{font-size:12px;color:var(--muted);margin-bottom:6px;display:block}
    .row{display:flex;gap:10px}
    .row > *{flex:1}
    table{width:100%;border-collapse:collapse}
    th,td{padding:10px;border-bottom:1px solid var(--border);text-align:left;vertical-align:top}
    th{color:var(--muted);font-weight:600}
    .muted{color:var(--muted)}
    .kpi{display:flex;gap:8px;align-items:center}
    .kpi strong{font-size:20px}
    .sep{height:1px;background:var(--border);margin:8px 0}
    .right-actions{display:flex;gap:8px;flex-wrap:wrap;justify-content:flex-end}
    .pill{padding:2px 8px;border-radius:999px;background:rgba(0,0,0,.05);border:1px solid var(--border);color:var(--muted);font-size:12px}
    .warn{color:var(--warning)}
    .ok{color:var(--accent)}
    .danger-t{color:var(--danger)}
    .note{font-size:12px;color:var(--muted)}
    .nowrap{white-space:nowrap}
    .hstack{display:flex;gap:8px;align-items:center}
    .vstack{display:flex;flex-direction:column;gap:8px}
    .tag{display:inline-block;padding:2px 8px;background:rgba(99, 102, 241, .1);border:1px solid var(--border);border-radius:999px;font-size:12px}
    /* Print (for PDF export of participation list, results, and scoreboards) */
    @media print{
      header,.no-print,.tabs,.right-actions,button,input,select,textarea{display:none!important}
      .container{max-width:100%;margin:0;padding:0}
      .card{border:none;box-shadow:none;padding:0}
      body{background:#fff;color:#000}
      .print-block{display:block!important}
    }
  </style>
</head>
<body data-theme="light">
<header>
  <div class="bar">
    <div class="brand">
      <div class="logo" id="brandLogo">ü™Ñ</div>
      <div>
        <h1 id="brandName">ESCRITA 4.0</h1>
        <small id="brandSub">RIBATH Eduvalley Students' Association</small>
      </div>
    </div>
    <div class="right">
      <span id="sessionInfo" class="chip"></span>
      <button class="btn" id="themeToggle">üåó Theme</button>
      <button class="btn" id="logoutBtn" title="Logout">‚Ü©Ô∏è Logout</button>
    </div>
  </div>
</header>

<main class="container">
  <!-- Login -->
  <section id="loginView" class="card">
    <h2>Sign in</h2>
    <p class="muted">Event Crew and Team portals.</p>
    <div class="grid resp">
      <div class="vstack">
        <label for="loginId">ID</label>
        <input id="loginId" placeholder="admin / qar / qaz"/>
      </div>
      <div class="vstack">
        <label for="loginPw">Password</label>
        <input id="loginPw" type="password" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"/>
      </div>
    </div>
    <div class="row" style="margin-top:10px">
      <button class="btn primary" id="loginBtn">Sign in</button>
      <button class="btn" id="prefillAdmin">Use admin</button>
      <button class="btn" id="prefillQar">Use Qarawiyyin</button>
      <button class="btn" id="prefillQaz">Use Qazwiyyin</button>
    </div>
    <p class="note" style="margin-top:10px">Default credentials: admin/admin123, qar/qar123, qaz/qaz123</p>
  </section>

  <!-- Admin Portal -->
  <section id="adminView" class="hidden">
    <div class="tabs" id="adminTabs"></div>
    <div id="adminDashboard" class="card"></div>
    <div id="adminBranding" class="card hidden"></div>
    <div id="adminTeams" class="card hidden"></div>
    <div id="adminCompetitions" class="card hidden"></div>
    <div id="adminRoster" class="card hidden"></div>
    <div id="adminAttend" class="card hidden"></div>
    <div id="adminJudge" class="card hidden"></div>
    <div id="adminScoreboards" class="card hidden"></div>
    <div id="adminResults" class="card hidden"></div>
    <div id="adminData" class="card hidden"></div>
  </section>

  <!-- Team Portal -->
  <section id="teamView" class="hidden">
    <div class="tabs" id="teamTabs"></div>
    <div id="teamDashboard" class="card"></div>
    <div id="teamRoster" class="card hidden"></div>
    <div id="teamRegister" class="card hidden"></div>
    <div id="teamParticipationList" class="card hidden"></div>
    <div id="teamScoreResults" class="card hidden"></div>
    <div id="teamData" class="card hidden"></div>
  </section>
</main>

<input type="file" id="hiddenFileInput" class="hidden" accept="application/json,image/*"/>

<script>
/* ========= In-memory DB with localStorage persist ========= */
const STORAGE_KEY='escritaDB_v1';
const TEAMS=['Qarawiyyin','Qazwiyyin'];
let db=null;
let session={role:null,team:null}; // role: 'admin'|'team'
const q=(id)=>document.getElementById(id);
const now=()=>new Date().toISOString();
const uid=(p='id')=>p+'_'+Math.random().toString(36).slice(2)+Date.now().toString(36);

function defaultDB(){
  return {
    meta:{ name:'ESCRITA 4.0', logoDataUrl:'', primaryColor:'#3b82f6', theme:'light' },
    auth:{
      admin:{ id:'admin', password:'admin123' },
      teams:{
        Qarawiyyin:{ id:'qar', password:'qar123', lockedByEvent:false, selfLocked:false },
        Qazwiyyin:{ id:'qaz', password:'qaz123', lockedByEvent:false, selfLocked:false },
      }
    },
    categories:['Senior','Junior','General'],
    competitions:[], // {id,name,category,type,quotaPerTeam,active,createdAt}
    students:{}, // studentId -> {id,team,name,chest,category,createdAt}
    registrations:{}, // compId -> { teamParticipants: {Team:[studentId,...]}, attendance:{studentId:true/false}}
    results:{}, // compId -> { winners:[{rank,studentId,points}], log:[{ts,action,note}] }
    adjustments:[] // {id, team, amount, category:null|'Senior'|..., reason, ts}
  };
}
function saveDB(){ localStorage.setItem(STORAGE_KEY, JSON.stringify(db)); }
function loadDB(){
  const raw=localStorage.getItem(STORAGE_KEY);
  if(!raw){ db=defaultDB(); seedSample(); saveDB(); }
  else { db=JSON.parse(raw); }
  applyTheme(db.meta.theme);
  setPrimaryColor(db.meta.primaryColor);
  renderHeader();
}
function resetWithSample(){
  db=defaultDB(); seedSample(); saveDB(); routeToLogin();
}

/* ========= Sample data (optional) ========= */
function seedSample(){
  // competitions
  const comps=[
    {name:'Malayalam Elocution',category:'Senior',type:'individual',quotaPerTeam:3},
    {name:'English Elocution',category:'Senior',type:'individual',quotaPerTeam:3},
    {name:'Quran Recitation',category:'Junior',type:'individual',quotaPerTeam:4},
    {name:'Group Nadh',category:'General',type:'group',quotaPerTeam:8},
  ];
  comps.forEach(c=>{
    db.competitions.push({id:uid('cmp'), name:c.name, category:c.category, type:c.type, quotaPerTeam:c.quotaPerTeam, active:true, createdAt:now()});
  });
  // a few students
  addStudent('Qarawiyyin','QAR-001','Minhaj','Senior');
  addStudent('Qarawiyyin','QAR-002','Sinan','Senior');
  addStudent('Qarawiyyin','QAR-101','Aisha','Junior');
  addStudent('Qazwiyyin','QAZ-001','Hadi','Senior');
  addStudent('Qazwiyyin','QAZ-102','Safa','Junior');
}

/* ========= Header / Theme ========= */
function renderHeader(){
  q('brandName').textContent=db.meta.name;
  q('sessionInfo').textContent=session.role? (session.role==='admin'?'Event Crew':'Team: '+session.team):'Not signed in';
  const lg=q('brandLogo');
  lg.innerHTML = db.meta.logoDataUrl ? `<img src="${db.meta.logoDataUrl}" alt="logo" style="width:100%;height:100%;object-fit:cover;border-radius:8px"/>` : 'ü™Ñ';
}
function applyTheme(theme){
  document.body.setAttribute('data-theme', theme);
  db.meta.theme=theme; saveDB();
}
function setPrimaryColor(hex){
  document.documentElement.style.setProperty('--primary', hex||'#3b82f6');
}

/* ========= Auth ========= */
function tryLogin(id,pw){
  // admin
  if(id===db.auth.admin.id && pw===db.auth.admin.password){
    session={role:'admin',team:null};
    renderHeader(); showAdmin(); return true;
  }
  // team
  for(const t of TEAMS){
    const creds=db.auth.teams[t];
    if(id===creds.id && pw===creds.password){
      session={role:'team',team:t};
      renderHeader(); showTeam(); return true;
    }
  }
  alert('Invalid credentials');
  return false;
}
function logout(){
  session={role:null,team:null};
  renderHeader();
  routeToLogin();
}

/* ========= Core helpers ========= */
function addStudent(team,chest,name,category){
  // Enforce unique chest across event
  for(const sId in db.students){
    if(db.students[sId].chest===chest){ return {ok:false,msg:'Chest number already exists'}; }
  }
  const id=uid('stu');
  db.students[id]={id,team,chest,name,category,createdAt:now()};
  saveDB(); return {ok:true,id};
}
function removeStudent(studentId){
  // prevent if registered
  const used = Object.values(db.registrations).some(rec=> {
    return Object.values(rec.teamParticipants||{}).some(arr=>arr.includes(studentId));
  });
  if(used) return {ok:false,msg:'Student is registered in competitions. Remove them from competitions first.'};
  delete db.students[studentId];
  saveDB(); return {ok:true};
}
function teamLocked(t){
  const lockByEvent = db.auth.teams[t].lockedByEvent;
  const selfLock = db.auth.teams[t].selfLocked;
  return lockByEvent || selfLock;
}
function ensureReg(compId){
  if(!db.registrations[compId]){
    db.registrations[compId]={ teamParticipants:{}, attendance:{} };
    TEAMS.forEach(t=>db.registrations[compId].teamParticipants[t]=[]);
  }
  return db.registrations[compId];
}
function getCompetitionById(id){ return db.competitions.find(c=>c.id===id); }
function getStudentsByTeam(team){
  return Object.values(db.students).filter(s=>s.team===team);
}
function getStudentsByTeamAndCategory(team,category){
  return getStudentsByTeam(team).filter(s=> category==='General' ? true : s.category===category);
}
function registerStudentToCompetition(team, studentId, compId){
  const comp=getCompetitionById(compId); if(!comp) return {ok:false,msg:'Invalid competition'};
  if(teamLocked(team)) return {ok:false,msg:'Team is locked'};
  // category rule
  const stu=db.students[studentId];
  if(!stu) return {ok:false,msg:'Student not found'};
  if(comp.category!=='General' && comp.category!==stu.category){
    return {ok:false,msg:`Only ${comp.category} students allowed`};
  }
  const reg=ensureReg(compId);
  const arr=reg.teamParticipants[team]||[];
  // prevent duplicates
  if(arr.includes(studentId)) return {ok:false,msg:'Already registered'};
  // enforce quota
  if(arr.length >= comp.quotaPerTeam) return {ok:false,msg:`Quota reached (${comp.quotaPerTeam})`};
  arr.push(studentId);
  reg.teamParticipants[team]=arr;
  saveDB(); return {ok:true};
}
function unregisterStudentFromCompetition(team, studentId, compId){
  const reg=ensureReg(compId);
  reg.teamParticipants[team]=(reg.teamParticipants[team]||[]).filter(id=>id!==studentId);
  // remove attendance
  delete reg.attendance[studentId];
  // also remove from winners if present
  const res=db.results[compId];
  if(res && res.winners){ res.winners = res.winners.filter(w=>w.studentId!==studentId); }
  saveDB(); return {ok:true};
}
function markAttendance(compId, studentId, present){
  const reg=ensureReg(compId);
  reg.attendance[studentId]=!!present; saveDB();
}
function setWinners(compId, winners){ // winners: [{rank, studentId, points}]
  if(!db.results[compId]) db.results[compId]={winners:[],log:[]};
  db.results[compId].winners=winners;
  db.results[compId].log.push({ts:now(), action:'update', note:`Set ${winners.length} winners`});
  saveDB();
}
function addAdjustment(team, amount, reason, category=null){
  db.adjustments.push({id:uid('adj'), team, amount:parseFloat(amount)||0, reason, category, ts:now()});
  saveDB();
}
function removeAdjustment(id){
  db.adjustments = db.adjustments.filter(a=>a.id!==id); saveDB();
}

/* ========= Points / Scoreboards ========= */
function computePoints(){
  // returns { byCompetitor: Map(studentId->totalPoints), byCompetitorByCat: {cat:Map}, teamTotals: Map(team->points), teamTotalsByCat: {cat:Map}}
  const byCompetitor=new Map();
  const byCompetitorByCat={};
  db.categories.forEach(c=>byCompetitorByCat[c]=new Map());

  for(const compId in db.results){
    const res=db.results[compId]; if(!res || !res.winners) continue;
    res.winners.forEach(w=>{
      const stu=db.students[w.studentId]; if(!stu) return;
      const cat=stu.category; // competitor's own category
      byCompetitor.set(w.studentId, (byCompetitor.get(w.studentId)||0)+Number(w.points||0));
      const map=byCompetitorByCat[cat]; map.set(w.studentId, (map.get(w.studentId)||0)+Number(w.points||0));
    });
  }
  // team totals (per category and overall)
  const teamTotals=new Map(); const teamTotalsByCat={}; db.categories.forEach(c=>teamTotalsByCat[c]=new Map());
  // from competitor points
  for(const [stuId, pts] of byCompetitor.entries()){
    const stu=db.students[stuId]; if(!stu) continue;
    teamTotals.set(stu.team, (teamTotals.get(stu.team)||0)+pts);
    const map=teamTotalsByCat[stu.category];
    map.set(stu.team, (map.get(stu.team)||0)+pts);
  }
  // apply adjustments
  db.adjustments.forEach(a=>{
    if(a.category){
      const map=teamTotalsByCat[a.category];
      map.set(a.team,(map.get(a.team)||0)+a.amount);
    }else{
      teamTotals.set(a.team,(teamTotals.get(a.team)||0)+a.amount);
    }
  });
  return {byCompetitor, byCompetitorByCat, teamTotals, teamTotalsByCat};
}

/* ========= UI Helpers ========= */
function setTabs(containerId, tabs, onClick){
  const c=q(containerId); c.innerHTML='';
  tabs.forEach((t,i)=>{
    const b=document.createElement('button'); b.className='tab'+(t.active?' active':''); b.textContent=t.label;
    b.onclick=()=>onClick(t.id);
    c.appendChild(b);
  });
}
function formatDT(iso){ const d=new Date(iso); return d.toLocaleString(); }
function download(filename, content, type='application/json'){
  const blob=new Blob([content], {type}); const a=document.createElement('a');
  a.href=URL.createObjectURL(blob); a.download=filename; a.click(); URL.revokeObjectURL(a.href);
}
function openFile(accept, cb){
  const fi=q('hiddenFileInput'); fi.accept=accept;
  fi.onchange=(e)=>{
    const file=e.target.files[0]; if(!file) return;
    const reader=new FileReader();
    reader.onload=()=>cb(file, reader.result);
    reader.readAsText(file);
    fi.value='';
  };
  fi.click();
}
function openImage(cb){
  const fi=q('hiddenFileInput'); fi.accept='image/*';
  fi.onchange=(e)=>{
    const file=e.target.files[0]; if(!file) return;
    const reader=new FileReader();
    reader.onload=()=>cb(reader.result);
    reader.readAsDataURL(file);
    fi.value='';
  };
  fi.click();
}
function toCSV(rows){
  return rows.map(r=>r.map(v=>`"${String(v??'').replace(/"/g,'""')}"`).join(',')).join('\n');
}

/* ========= Admin View ========= */
function showAdmin(){
  q('loginView').classList.add('hidden');
  q('teamView').classList.add('hidden');
  q('adminView').classList.remove('hidden');
  setTabs('adminTabs',[
    {id:'dash',label:'Dashboard',active:true},
    {id:'brand',label:'Branding'},
    {id:'teams',label:'Teams & Access'},
    {id:'comp',label:'Competitions'},
    {id:'roster',label:'Rosters'},
    {id:'att',label:'Attendance'},
    {id:'judge',label:'Judge Panel'},
    {id:'score',label:'Scoreboards'},
    {id:'results',label:'Results'},
    {id:'data',label:'Data I/O'}
  ], (tab)=>adminSwitch(tab));
  adminRenderDashboard(); adminRenderBranding(); adminRenderTeams(); adminRenderCompetitions();
  adminRenderRoster(); adminRenderAttendance(); adminRenderJudge(); adminRenderScoreboards(); adminRenderResults(); adminRenderData();
  adminSwitch('dash');
}
function adminSwitch(id){
  ['adminDashboard','adminBranding','adminTeams','adminCompetitions','adminRoster','adminAttend','adminJudge','adminScoreboards','adminResults','adminData']
    .forEach(sec=>q(sec).classList.add('hidden'));
  const map={dash:'adminDashboard', brand:'adminBranding', teams:'adminTeams', comp:'adminCompetitions', roster:'adminRoster', att:'adminAttend', judge:'adminJudge', score:'adminScoreboards', results:'adminResults', data:'adminData'};
  q(map[id]).classList.remove('hidden');
  // activate tab UI
  [...q('adminTabs').children].forEach(b=>b.classList.remove('active'));
  const idx=['dash','brand','teams','comp','roster','att','judge','score','results','data'].indexOf(id);
  q('adminTabs').children[idx].classList.add('active');
}
function adminRenderDashboard(){
  const totalStu=Object.keys(db.students).length;
  const totalComp=db.competitions.length;
  const regCount=Object.values(db.registrations).reduce((sum,r)=> sum + TEAMS.reduce((s,t)=>s+(r.teamParticipants?.[t]?.length||0),0), 0);
  const locks=TEAMS.map(t=>teamLocked(t)?'üîí '+t:'üîì '+t).join(' ‚Ä¢ ');
  q('adminDashboard').innerHTML=`
    <h2>Event Crew Dashboard</h2>
    <div class="grid cols-3">
      <div class="card"><div class="kpi">üìö <div><div class="muted">Competitions</div><strong>${totalComp}</strong></div></div></div>
      <div class="card"><div class="kpi">üßë‚Äçüéì <div><div class="muted">Students</div><strong>${totalStu}</strong></div></div></div>
      <div class="card"><div class="kpi">üìù <div><div class="muted">Registrations</div><strong>${regCount}</strong></div></div></div>
    </div>
    <p class="muted">Access: ${locks}</p>
  `;
}
function adminRenderBranding(){
  q('adminBranding').innerHTML=`
    <h3>Branding & Theme</h3>
    <div class="grid resp">
      <div class="vstack">
        <label>Event name</label>
        <input id="brandNameInput" value="${db.meta.name}">
        <label>Primary color</label>
        <input id="primaryColorInput" type="color" value="${db.meta.primaryColor}">
        <div class="row" style="margin-top:8px">
          <button class="btn primary" id="saveBrandBtn">Save</button>
          <button class="btn" id="uploadLogoBtn">Upload logo</button>
          <button class="btn danger" id="removeLogoBtn">Remove logo</button>
        </div>
      </div>
      <div>
        <div class="card">
          <div class="kpi">Preview</div>
          <div class="sep"></div>
          <div class="hstack">
            <div class="logo" style="width:56px;height:56px" id="brandPrevLogo">${db.meta.logoDataUrl?'':'ü™Ñ'}</div>
            <div>
              <h2 id="brandPrevName" style="margin:0">${db.meta.name}</h2>
              <div class="muted">Primary: ${db.meta.primaryColor}</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  `;
  if(db.meta.logoDataUrl){ q('brandPrevLogo').innerHTML=`<img src="${db.meta.logoDataUrl}" style="width:100%;height:100%;object-fit:cover;border-radius:8px">`; }
  q('saveBrandBtn').onclick=()=>{
    db.meta.name=q('brandNameInput').value.trim()||'ESCRITA 4.0';
    db.meta.primaryColor=q('primaryColorInput').value||'#3b82f6';
    setPrimaryColor(db.meta.primaryColor); saveDB(); renderHeader(); adminRenderBranding();
  };
  q('uploadLogoBtn').onclick=()=>openImage((data)=>{ db.meta.logoDataUrl=data; saveDB(); renderHeader(); adminRenderBranding(); });
  q('removeLogoBtn').onclick=()=>{ db.meta.logoDataUrl=''; saveDB(); renderHeader(); adminRenderBranding(); };
}
function adminRenderTeams(){
  const html=TEAMS.map(t=>{
    const cre=db.auth.teams[t];
    return `
      <div class="card">
        <h4>${t}</h4>
        <div class="grid cols-3">
          <div><label>Login ID</label><input id="id_${t}" value="${cre.id}"></div>
          <div><label>Password</label><input id="pw_${t}" value="${cre.password}" type="password"></div>
          <div><label>Status</label><div class="kpi">${cre.lockedByEvent?'üîí Locked by Event Crew':'üîì Unlocked'}</div></div>
        </div>
        <div class="row" style="margin-top:8px">
          <button class="btn" onclick="updateTeamCreds('${t}')">Save</button>
          <button class="btn ${cre.lockedByEvent?'success':'warning'}" onclick="toggleEventLock('${t}')">${cre.lockedByEvent?'Unlock':'Lock'}</button>
          <button class="btn" onclick="clearSelfLock('${t}')">Clear self-lock</button>
        </div>
      </div>
    `;
  }).join('');
  q('adminTeams').innerHTML=`
    <h3>Teams & Access</h3>
    <div class="grid">${html}</div>
  `;
}
window.updateTeamCreds=(t)=>{
  db.auth.teams[t].id=q('id_'+t).value.trim();
  db.auth.teams[t].password=q('pw_'+t).value.trim();
  saveDB(); alert('Saved'); adminRenderTeams();
};
window.toggleEventLock=(t)=>{ db.auth.teams[t].lockedByEvent=!db.auth.teams[t].lockedByEvent; saveDB(); adminRenderTeams(); };
window.clearSelfLock=(t)=>{ db.auth.teams[t].selfLocked=false; saveDB(); adminRenderTeams(); };

function adminRenderCompetitions(){
  const rows=db.competitions.map(c=>{
    const usedQ=TEAMS.map(t=>(ensureReg(c.id).teamParticipants[t]||[]).length + ' '+t).join(' | ');
    return `
      <tr>
        <td>${c.name}<div class="note">${c.category} ‚Ä¢ ${c.type}</div></td>
        <td class="nowrap">${c.quotaPerTeam} / team</td>
        <td>${c.active?'<span class="pill ok">Active</span>':'<span class="pill warn">Hidden</span>'}</td>
        <td class="muted">${formatDT(c.createdAt)}</td>
        <td class="nowrap">${usedQ}</td>
        <td class="nowrap">
          <button class="btn" onclick="editComp('${c.id}')">Edit</button>
          <button class="btn danger" onclick="delComp('${c.id}')">Delete</button>
        </td>
      </tr>`;
  }).join('');
  q('adminCompetitions').innerHTML=`
    <h3>Competitions</h3>
    <div class="grid resp">
      <div>
        <div class="vstack">
          <label>Name</label><input id="c_name" placeholder="e.g., Malayalam Elocution">
          <div class="row">
            <div><label>Category</label>
              <select id="c_cat">${db.categories.map(c=>`<option>${c}</option>`).join('')}</select>
            </div>
            <div><label>Type</label>
              <select id="c_type"><option>individual</option><option>group</option></select>
            </div>
            <div><label>Quota per team</label><input id="c_quota" type="number" min="1" value="3"></div>
          </div>
          <div class="row">
            <button class="btn primary" id="addCompBtn">Add competition</button>
          </div>
          <p class="note">Quota = max participants allowed per team for this competition.</p>
        </div>
      </div>
      <div>
        <table>
          <thead><tr><th>Competition</th><th>Quota</th><th>Status</th><th>Created</th><th>Used</th><th></th></tr></thead>
          <tbody>${rows||'<tr><td colspan="6" class="muted">No competitions yet</td></tr>'}</tbody>
        </table>
      </div>
    </div>
  `;
  q('addCompBtn').onclick=()=>{
    const name=q('c_name').value.trim(); if(!name) return alert('Enter name');
    const category=q('c_cat').value; const type=q('c_type').value; const quota=parseInt(q('c_quota').value)||1;
    db.competitions.push({id:uid('cmp'), name, category, type, quotaPerTeam:quota, active:true, createdAt:now()});
    saveDB(); adminRenderCompetitions();
    q('c_name').value='';
  };
}
window.editComp=(id)=>{
  const c=getCompetitionById(id); if(!c) return;
  const name=prompt('Name', c.name); if(!name) return;
  const category=prompt(`Category [${db.categories.join('/')}]`, c.category)||c.category;
  const type=prompt('Type [individual/group]', c.type)||c.type;
  const quota=parseInt(prompt('Quota per team', c.quotaPerTeam))||c.quotaPerTeam;
  const active=confirm('Make ACTIVE? (Cancel = hide)')?true:false;
  c.name=name; c.category=category; c.type=type; c.quotaPerTeam=quota; c.active=active;
  saveDB(); adminRenderCompetitions();
};
window.delComp=(id)=>{
  if(!confirm('Delete competition? This will also remove registrations/results.')) return;
  delete db.registrations[id]; delete db.results[id];
  db.competitions=db.competitions.filter(c=>c.id!==id); saveDB(); adminRenderCompetitions();
};

function adminRenderRoster(){
  const teamSel=TEAMS.map(t=>`<option>${t}</option>`).join('');
  q('adminRoster').innerHTML=`
    <h3>Team Rosters</h3>
    <div class="row">
      <div><label>Team</label><select id="ar_team">${teamSel}</select></div>
      <div><label>Category</label>
        <select id="ar_cat"><option value="">All</option>${db.categories.map(c=>`<option>${c}</option>`).join('')}</select>
      </div>
      <div class="right-actions"><button class="btn" id="ar_export">Export CSV</button></div>
    </div>
    <div id="ar_table" style="margin-top:8px"></div>
  `;
  const renderTable=()=>{
    const t=q('ar_team').value; const cat=q('ar_cat').value;
    const students=getStudentsByTeam(t).filter(s=>!cat || s.category===cat);
    const rows=students.map(s=>`<tr><td>${s.chest}</td><td>${s.name}</td><td>${s.category}</td><td class="muted">${formatDT(s.createdAt)}</td></tr>`).join('');
    q('ar_table').innerHTML=`
      <table><thead><tr><th>Chest #</th><th>Name</th><th>Category</th><th>Added</th></tr></thead>
      <tbody>${rows||'<tr><td colspan="4" class="muted">No students</td></tr>'}</tbody></table>
    `;
  };
  q('ar_team').onchange=renderTable; q('ar_cat').onchange=renderTable; renderTable();
  q('ar_export').onclick=()=>{
    const t=q('ar_team').value; const cat=q('ar_cat').value;
    const students=getStudentsByTeam(t).filter(s=>!cat || s.category===cat);
    const csv=toCSV([['Chest','Name','Category']].concat(students.map(s=>[s.chest,s.name,s.category])));
    download(`roster_${t}${cat?('_'+cat):''}.csv`, csv, 'text/csv');
  };
}

function adminRenderAttendance(){
  const compList= db.competitions.map(c=>`<option value="${c.id}">${c.name} ‚Ä¢ ${c.category}</option>`).join('');
  q('adminAttend').innerHTML=`
    <h3>Attendance</h3>
    <div class="row">
      <div><label>Competition</label><select id="att_comp">${compList}</select></div>
      <div class="right-actions">
        <button class="btn" id="att_markAll">Mark all present</button>
        <button class="btn" id="att_clearAll">Clear all</button>
      </div>
    </div>
    <div id="att_table" style="margin-top:8px"></div>
  `;
  const render=()=>{
    const compId=q('att_comp').value; const comp=getCompetitionById(compId); const reg=ensureReg(compId);
    const tbl=TEAMS.map(team=>{
      const list=(reg.teamParticipants[team]||[]).map(sid=>{
        const s=db.students[sid]; const present=!!reg.attendance[sid];
        return `<tr><td>${team}</td><td>${s.chest}</td><td>${s.name}</td><td>${s.category}</td>
          <td><input type="checkbox" ${present?'checked':''} onchange="toggleAtt('${compId}','${sid}',this.checked)"></td></tr>`;
      }).join('');
      return list;
    }).join('');
    q('att_table').innerHTML=`
      <div class="note">Competition: ${comp.name} (${comp.category})</div>
      <table><thead><tr><th>Team</th><th>Chest</th><th>Name</th><th>Category</th><th>Present</th></tr></thead>
      <tbody>${tbl||'<tr><td colspan="5" class="muted">No registrations</td></tr>'}</tbody></table>
    `;
  };
  q('att_comp').onchange=render; render();
  q('att_markAll').onclick=()=>{
    const compId=q('att_comp').value; const reg=ensureReg(compId);
    const all=[...(reg.teamParticipants[TEAMS[0]]||[]),...(reg.teamParticipants[TEAMS[1]]||[])];
    all.forEach(sid=>reg.attendance[sid]=true); saveDB(); render();
  };
  q('att_clearAll').onclick=()=>{
    const compId=q('att_comp').value; db.registrations[compId].attendance={}; saveDB(); render();
  };
}
window.toggleAtt=(compId, sid, val)=>{ markAttendance(compId, sid, val); };

function adminRenderJudge(){
  const compList= db.competitions.map(c=>`<option value="${c.id}">${c.name} ‚Ä¢ ${c.category}</option>`).join('');
  q('adminJudge').innerHTML=`
    <h3>Judge Panel</h3>
    <div class="row">
      <div><label>Competition</label><select id="jp_comp">${compList}</select></div>
      <div class="right-actions">
        <button class="btn" id="jp_addRank">Add rank</button>
        <button class="btn success" id="jp_save">Save results</button>
        <button class="btn danger" id="jp_clear">Clear</button>
      </div>
    </div>
    <div id="jp_winners" style="margin-top:8px"></div>
    <div class="sep"></div>
    <h4>Change log</h4>
    <div id="jp_log"></div>
  `;
  const render=()=>{
    const compId=q('jp_comp').value; const comp=getCompetitionById(compId);
    const reg=ensureReg(compId); const res=db.results[compId]||{winners:[],log:[]};
    // candidate pool: present attendees first
    const presentIds=new Set(Object.entries(reg.attendance).filter(([sid,pr])=>pr).map(([sid])=>sid));
    const pool=[...new Set([...(reg.teamParticipants[TEAMS[0]]||[]),...(reg.teamParticipants[TEAMS[1]]||[])])];
    const candidates=[...pool].sort((a,b)=>{
      const ap=presentIds.has(a)?1:0, bp=presentIds.has(b)?1:0;
      if(bp-ap) return bp-ap;
      const an=db.students[a].name.toLowerCase(), bn=db.students[b].name.toLowerCase();
      return an.localeCompare(bn);
    });
    const opt=(sid)=>`<option value="${sid}">${db.students[sid].name} (${db.students[sid].team} ‚Ä¢ ${db.students[sid].chest})${presentIds.has(sid)?'':' [absent]'}</option>`;
    const rows=(res.winners.length?res.winners:[{rank:1,studentId:'',points:7},{rank:2,studentId:'',points:5},{rank:3,studentId:'',points:3}]).map((w,i)=>{
      return `
        <tr>
          <td><input type="number" min="1" value="${w.rank||i+1}" data-rank at="${i}"></td>
          <td><select data-sel at="${i}"><option value="">-- select participant --</option>${candidates.map(opt).join('')}</select></td>
          <td><input type="number" value="${w.points||0}" data-pts at="${i}"></td>
        </tr>
      `;
    }).join('');
    q('jp_winners').innerHTML=`
      <div class="note">Competition: ${comp.name} (${comp.category}) ‚Ä¢ Present first in list.</div>
      <table><thead><tr><th>Rank</th><th>Participant</th><th>Points</th></tr></thead>
      <tbody id="jp_body">${rows}</tbody></table>
    `;
    // set selected
    const selEls=[...document.querySelectorAll('[data-sel]')];
    selEls.forEach((s,i)=>{ s.value = (res.winners[i]?.studentId)||''; });
    const logHTML=(res.log||[]).slice().reverse().map(l=>`<div class="note">‚Ä¢ ${formatDT(l.ts)} ‚Äî ${l.action} ‚Äî ${l.note}</div>`).join('') || '<div class="muted">No updates yet</div>';
    q('jp_log').innerHTML=logHTML;
  };
  q('jp_comp').onchange=render; render();
  q('jp_addRank').onclick=()=>{
    const body=q('jp_body'); const tr=document.createElement('tr');
    const idx=body.children.length+1;
    tr.innerHTML=`<td><input type="number" min="1" value="${idx}" data-rank></td>
      <td><select data-sel><option value="">-- select participant --</option></select></td>
      <td><input type="number" value="0" data-pts></td>`;
    body.appendChild(tr);
    // rebuild to include options
    adminRenderJudge();
  };
  q('jp_save').onclick=()=>{
    const compId=q('jp_comp').value; const rows=[...document.querySelectorAll('#jp_body tr')];
    const winners=[];
    for(const r of rows){
      const rank=parseInt(r.querySelector('[data-rank]').value);
      const sel=r.querySelector('[data-sel]').value;
      const pts=parseFloat(r.querySelector('[data-pts]').value)||0;
      if(sel){ winners.push({rank,studentId:sel,points:pts}); }
    }
    // sorted by rank
    winners.sort((a,b)=>a.rank-b.rank);
    // ensure unique students
    const seen=new Set(); const final=[]; for(const w of winners){ if(!seen.has(w.studentId)){ final.push(w); seen.add(w.studentId);}}
    setWinners(compId, final); adminRenderJudge(); adminRenderScoreboards(); adminRenderResults();
  };
  q('jp_clear').onclick=()=>{
    const compId=q('jp_comp').value;
    db.results[compId]={winners:[],log:[...(db.results[compId]?.log||[]), {ts:now(),action:'clear',note:'Cleared winners'}]};
    saveDB(); adminRenderJudge(); adminRenderScoreboards(); adminRenderResults();
  };
}

function adminRenderScoreboards(){
  const pts=computePoints();
  // Competitor leaders by category
  const competitorHTML=db.categories.map(cat=>{
    const map=pts.byCompetitorByCat[cat]; const arr=[...map.entries()].sort((a,b)=>b[1]-a[1]);
    const rows=arr.map(([sid,score],i)=>{
      const s=db.students[sid]; return `<tr><td>${i+1}</td><td>${s.name}</td><td>${s.team}</td><td>${s.chest}</td><td>${score}</td></tr>`;
    }).join('');
    return `
      <div class="card">
        <h4>${cat} ‚Äî Top competitors</h4>
        <table><thead><tr><th>#</th><th>Name</th><th>Team</th><th>Chest</th><th>Points</th></tr></thead>
        <tbody>${rows||'<tr><td colspan="5" class="muted">No points yet</td></tr>'}</tbody></table>
      </div>
    `;
  }).join('');
  // Team leaderboard per category
  const teamPerCatHTML=db.categories.map(cat=>{
    const map=pts.teamTotalsByCat[cat]; const arr=[...map.entries()].sort((a,b)=>b[1]-a[1]);
    const rows=arr.map(([team,score],i)=>`<tr><td>${i+1}</td><td>${team}</td><td>${score}</td></tr>`).join('');
    return `
      <div class="card">
        <h4>${cat} ‚Äî Team leaderboard</h4>
        <table><thead><tr><th>#</th><th>Team</th><th>Points</th></tr></thead>
        <tbody>${rows||'<tr><td colspan="3" class="muted">No points yet</td></tr>'}</tbody></table>
      </div>
    `;
  }).join('');
  // Overall team leaderboard (with overall adjustments)
  const overall=[...pts.teamTotals.entries()].sort((a,b)=>b[1]-a[1]);
  const overallRows=overall.map(([team,score],i)=>`<tr><td>${i+1}</td><td>${team}</td><td>${score}</td></tr>`).join('');
  // Adjustments editor
  const adjRows=db.adjustments.slice().reverse().map(a=>`
    <tr><td>${formatDT(a.ts)}</td><td>${a.team}</td><td>${a.category||'Overall'}</td><td>${a.reason||''}</td><td>${a.amount}</td>
    <td><button class="btn danger" onclick="delAdj('${a.id}')">Remove</button></td></tr>
  `).join('');
  q('adminScoreboards').innerHTML=`
    <h3>Scoreboards</h3>
    <div class="grid cols-2">
      <div class="vstack">
        ${competitorHTML}
      </div>
      <div class="vstack">
        ${teamPerCatHTML}
        <div class="card">
          <h4>Overall Team Leaderboard</h4>
          <table><thead><tr><th>#</th><th>Team</th><th>Points</th></tr></thead><tbody>${overallRows||'<tr><td colspan="3" class="muted">No points yet</td></tr>'}</tbody></table>
        </div>
        <div class="card">
          <h4>Adjustments (bonuses/penalties)</h4>
          <div class="row">
            <div><label>Team</label><select id="adj_team">${TEAMS.map(t=>`<option>${t}</option>`).join('')}</select></div>
            <div><label>Category (optional)</label><select id="adj_cat"><option value="">Overall</option>${db.categories.map(c=>`<option>${c}</option>`).join('')}</select></div>
          </div>
          <div class="row">
            <div><label>Amount (+/-)</label><input id="adj_amt" type="number" step="0.1" value="0"></div>
            <div><label>Reason</label><input id="adj_reason" placeholder="e.g., Irregularity / Bonus"></div>
          </div>
          <div class="row" style="margin-top:8px"><button class="btn primary" id="addAdjBtn">Add adjustment</button>
            <button class="btn" onclick="window.print()">Print scoreboards (PDF)</button>
          </div>
          <div style="margin-top:8px">
            <table><thead><tr><th>Time</th><th>Team</th><th>Category</th><th>Reason</th><th>Amount</th><th></th></tr></thead>
            <tbody>${adjRows||'<tr><td colspan="6" class="muted">No adjustments</td></tr>'}</tbody></table>
          </div>
        </div>
      </div>
    </div>
  `;
  q('addAdjBtn').onclick=()=>{
    const team=q('adj_team').value; const cat=q('adj_cat').value||null; const amt=q('adj_amt').value; const reason=q('adj_reason').value;
    addAdjustment(team, amt, reason, cat); adminRenderScoreboards();
  };
}
window.delAdj=(id)=>{ if(confirm('Remove adjustment?')){ removeAdjustment(id); adminRenderScoreboards(); } };

function adminRenderResults(){
  // list competitions in created order with winners
  const cards=db.competitions.slice().sort((a,b)=> new Date(a.createdAt)-new Date(b.createdAt)).map(c=>{
    const res=db.results[c.id]; const winners=(res?.winners||[]).map(w=>{
      const s=db.students[w.studentId]; if(!s) return '';
      return `<div>‚Ä¢ ${s.name} (${s.team} ‚Ä¢ ${s.category}) ‚Äî <strong>${w.rank} place</strong> ‚Äî ${w.points} pts</div>`;
    }).join('');
    return `
      <div class="card">
        <div class="hstack">
          <h4 style="margin:0">${c.name}</h4>
          <span class="pill">${c.category}</span>
          <span class="pill">${c.type}</span>
        </div>
        ${winners || '<div class="muted">No results yet</div>'}
      </div>
    `;
  }).join('');
  q('adminResults').innerHTML=`
    <div class="right-actions no-print">
      <button class="btn" onclick="window.print()">Print/Save PDF</button>
    </div>
    <h3>Winners (competition order)</h3>
    <div class="vstack print-block">${cards}</div>
  `;
}

function adminRenderData(){
  q('adminData').innerHTML=`
    <h3>Data I/O</h3>
    <div class="grid cols-2">
      <div class="card">
        <h4>Export</h4>
        <p class="note">Download a full JSON snapshot.</p>
        <button class="btn" id="exportAll">Export All (JSON)</button>
      </div>
      <div class="card">
        <h4>Import</h4>
        <p class="note">Import will replace current event data. Keep a backup!</p>
        <div class="row">
          <button class="btn warning" id="importAll">Import JSON</button>
          <button class="btn danger" id="resetSample">Reset with Sample</button>
        </div>
      </div>
    </div>
  `;
  q('exportAll').onclick=()=>download('escrita_data.json', JSON.stringify(db,null,2));
  q('importAll').onclick=()=>openFile('application/json',(file, text)=>{
    try{
      const newDB=JSON.parse(text);
      if(!confirm('Replace current data with imported JSON?')) return;
      db=newDB; saveDB(); alert('Imported. Reloading...');
      location.reload();
    }catch(e){ alert('Invalid JSON'); }
  });
  q('resetSample').onclick=()=>{ if(confirm('Reset to sample data?')) resetWithSample(); };
}

/* ========= Team View ========= */
function showTeam(){
  q('loginView').classList.add('hidden');
  q('adminView').classList.add('hidden');
  q('teamView').classList.remove('hidden');
  setTabs('teamTabs',[
    {id:'dash',label:'Dashboard',active:true},
    {id:'roster',label:'Roster'},
    {id:'register',label:'Register for Competitions'},
    {id:'plist',label:'Participation List'},
    {id:'scores',label:'Results & Scoreboards'},
    {id:'data',label:'Data I/O'},
  ], (tab)=>teamSwitch(tab));
  teamRenderDashboard(); teamRenderRoster(); teamRenderRegister(); teamRenderParticipationList(); teamRenderScores(); teamRenderData();
  teamSwitch('dash');
}
function teamSwitch(id){
  ['teamDashboard','teamRoster','teamRegister','teamParticipationList','teamScoreResults','teamData']
    .forEach(sec=>q(sec).classList.add('hidden'));
  const map={dash:'teamDashboard', roster:'teamRoster', register:'teamRegister', plist:'teamParticipationList', scores:'teamScoreResults', data:'teamData'};
  q(map[id]).classList.remove('hidden');
  // activate tab UI
  [...q('teamTabs').children].forEach(b=>b.classList.remove('active'));
  const idx=['dash','roster','register','plist','scores','data'].indexOf(id);
  q('teamTabs').children[idx].classList.add('active');
}
function teamRenderDashboard(){
  const t=session.team;
  const locked=teamLocked(t);
  const stu=getStudentsByTeam(t).length;
  // count registrations
  let regs=0; db.competitions.forEach(c=>{
    regs += (ensureReg(c.id).teamParticipants[t]||[]).length;
  });
  q('teamDashboard').innerHTML=`
    <h2>${t} ‚Äî Team Dashboard</h2>
    <div class="grid cols-3">
      <div class="card"><div class="kpi">üßë‚Äçüéì <div><div class="muted">Roster</div><strong>${stu}</strong></div></div></div>
      <div class="card"><div class="kpi">üìù <div><div class="muted">Registrations</div><strong>${regs}</strong></div></div></div>
      <div class="card"><div class="kpi">${locked?'üîí':'üîì'} <div><div class="muted">Portal Status</div><strong>${locked?'Locked':'Open'}</strong></div></div></div>
    </div>
    <div class="row" style="margin-top:8px">
      <button class="btn ${locked?'success':'warning'}" id="toggleSelfLock">${locked?'Unlock (self)':'Self-Lock Portal'}</button>
    </div>
    <p class="note">Note: Event Crew lock overrides self-lock.</p>
  `;
  q('toggleSelfLock').onclick=()=>{
    const cur=db.auth.teams[t].selfLocked;
    db.auth.teams[t].selfLocked=!cur; saveDB(); teamRenderDashboard();
  };
}
function teamRenderRoster(){
  const t=session.team;
  const locked=teamLocked(t);
  const rows=getStudentsByTeam(t).map(s=>`
    <tr>
      <td>${s.chest}</td><td>${s.name}</td><td>${s.category}</td>
      <td class="nowrap">
        <button class="btn" onclick="teamDelStudent('${s.id}')" ${locked?'disabled':''}>Delete</button>
      </td>
    </tr>`).join('');
  q('teamRoster').innerHTML=`
    <div class="hstack"><h3>Roster</h3> ${locked?'<span class="pill warn">Locked</span>':''}</div>
    <div class="grid resp">
      <div>
        <div class="vstack">
          <label>Chest number</label><input id="tr_chest" placeholder="e.g., QAR-015" ${locked?'disabled':''}>
          <label>Name</label><input id="tr_name" placeholder="Student name" ${locked?'disabled':''}>
          <label>Category</label>
          <select id="tr_cat" ${locked?'disabled':''}>${db.categories.map(c=>`<option>${c}</option>`).join('')}</select>
          <div class="row" style="margin-top:8px">
            <button class="btn primary" id="tr_add" ${locked?'disabled':''}>Add student</button>
            <button class="btn" id="tr_import" ${locked?'disabled':''}>Import JSON</button>
            <button class="btn" id="tr_export">Export JSON</button>
          </div>
        </div>
      </div>
      <div>
        <table>
          <thead><tr><th>Chest</th><th>Name</th><th>Category</th><th></th></tr></thead>
          <tbody>${rows||'<tr><td colspan="4" class="muted">No students yet</td></tr>'}</tbody>
        </table>
      </div>
    </div>
  `;
  q('tr_add').onclick=()=>{
    const chest=q('tr_chest').value.trim(), name=q('tr_name').value.trim(), cat=q('tr_cat').value;
    if(!chest || !name) return alert('Provide chest and name');
    const res=addStudent(t, chest, name, cat);
    if(!res.ok) return alert(res.msg);
    q('tr_chest').value=''; q('tr_name').value=''; teamRenderRoster(); teamRenderRegister();
  };
  q('tr_export').onclick=()=>{
    const data={
      team:t,
      students:Object.values(db.students).filter(s=>s.team===t),
      registrations:Object.fromEntries(Object.entries(db.registrations).map(([cid,rec])=> [cid, (rec.teamParticipants?.[t]||[])]))
    };
    download(`${t}_team_export.json`, JSON.stringify(data,null,2));
  };
  q('tr_import').onclick=()=>openFile('application/json',(file,text)=>{
    try{
      const data=JSON.parse(text);
      if(data.team && data.team!==t) return alert('This file is not for your team');
      if(!confirm('Import students and registrations for your team? This will merge and may create duplicates if same chest is changed.')) return;
      // import students (skip duplicate chest)
      (data.students||[]).forEach(s=>{
        if(!Object.values(db.students).some(x=>x.chest===s.chest)){
          const r=addStudent(t, s.chest, s.name, s.category);
          if(!r.ok) console.warn('Skip student', s.chest, r.msg);
        }
      });
      // import registrations
      for(const [cid, list] of Object.entries(data.registrations||{})){
        const comp=getCompetitionById(cid); if(!comp) continue;
        list.forEach(sid=>{
          if(db.students[sid] && db.students[sid].team===t){
            registerStudentToCompetition(t, sid, cid);
          }
        });
      }
      alert('Imported'); teamRenderRoster(); teamRenderRegister(); teamRenderParticipationList();
    }catch(e){ alert('Invalid JSON'); }
  });
}
window.teamDelStudent=(sid)=>{
  const s=db.students[sid]; if(!s) return;
  const used = Object.values(db.registrations).some(r=> Object.values(r.teamParticipants||{}).some(arr=>arr.includes(sid)));
  if(used){ return alert('Remove from competitions first'); }
  if(confirm(`Delete ${s.name}?`)){ removeStudent(sid); teamRenderRoster(); teamRenderRegister(); teamRenderParticipationList(); }
};

function teamRenderRegister(){
  const t=session.team; const locked=teamLocked(t);
  const comps=db.competitions.filter(c=>c.active!==false);
  const blocks=comps.map(c=>{
    const eligible=getStudentsByTeamAndCategory(t, c.category);
    const reg=ensureReg(c.id).teamParticipants[t]||[];
    const used=reg.length; const left=Math.max(0,c.quotaPerTeam - used);
    const regRows=reg.map(sid=>{
      const s=db.students[sid]; return `<tr><td>${s.chest}</td><td>${s.name}</td><td>${s.category}</td><td class="nowrap">
        <button class="btn" onclick="teamUnreg('${sid}','${c.id}')" ${locked?'disabled':''}>Remove</button></td></tr>`;
    }).join('');
    const options=eligible.filter(s=>!reg.includes(s.id)).map(s=>`<option value="${s.id}">${s.name} ‚Äî ${s.chest} (${s.category})</option>`).join('');
    return `
      <div class="card">
        <div class="hstack">
          <h4 style="margin:0">${c.name}</h4>
          <span class="pill">${c.category}</span>
          <span class="pill">${c.type}</span>
          <span class="pill">Quota: ${c.quotaPerTeam}</span>
          <span class="pill">${left} slots left</span>
        </div>
        <div class="row" style="margin:8px 0">
          <div><select id="sel_${c.id}" ${locked?'disabled':''}><option value="">-- select student --</option>${options}</select></div>
          <div><button class="btn primary" onclick="teamReg('${c.id}')" ${locked?'disabled':''}>Add</button></div>
        </div>
        <table>
          <thead><tr><th>Chest</th><th>Name</th><th>Category</th><th></th></tr></thead>
          <tbody>${regRows||'<tr><td colspan="4" class="muted">No registrations yet</td></tr>'}</tbody>
        </table>
      </div>
    `;
  }).join('');
  q('teamRegister').innerHTML=`
    <div class="hstack"><h3>Register for Competitions</h3> ${locked?'<span class="pill warn">Locked</span>':''}</div>
    <div class="vstack">${blocks||'<div class="muted">No competitions available yet</div>'}</div>
  `;
}
window.teamReg=(compId)=>{
  const sel=q('sel_'+compId); const sid=sel.value; if(!sid) return;
  const r=registerStudentToCompetition(session.team, sid, compId);
  if(!r.ok) alert(r.msg);
  teamRenderRegister(); teamRenderParticipationList();
};
window.teamUnreg=(sid,compId)=>{ unregisterStudentFromCompetition(session.team, sid, compId); teamRenderRegister(); teamRenderParticipationList(); };

function teamRenderParticipationList(){
  const t=session.team;
  // Build map studentId -> competitions[]
  const compsByStudent={};
  db.competitions.forEach(c=>{
    const reg=ensureReg(c.id).teamParticipants[t]||[];
    reg.forEach(sid=>{
      compsByStudent[sid]=compsByStudent[sid]||[];
      compsByStudent[sid].push(c.name + ' ('+c.category+')');
    });
  });
  const rows=Object.entries(compsByStudent).map(([sid,arr])=>{
    const s=db.students[sid]; return `<tr><td>${s.chest}</td><td>${s.name}</td><td>${arr.join(', ')}</td></tr>`;
  }).join('');
  q('teamParticipationList').innerHTML=`
    <div class="right-actions no-print">
      <button class="btn" onclick="window.print()">Download as PDF</button>
    </div>
    <h3>${t} ‚Äî Participation List</h3>
    <div class="print-block">
      <table>
        <thead><tr><th>Chest</th><th>Name</th><th>Competitions</th></tr></thead>
        <tbody>${rows||'<tr><td colspan="3" class="muted">No registrations yet</td></tr>'}</tbody>
      </table>
    </div>
  `;
}

function teamRenderScores(){
  const pts=computePoints();
  const t=session.team;
  // competitor scores for this team
  const compArr=[...pts.byCompetitor.entries()].filter(([sid,score])=> db.students[sid]?.team===t)
                  .sort((a,b)=>b[1]-a[1]);
  const rows=compArr.map(([sid,score],i)=>{
    const s=db.students[sid];
    return `<tr><td>${i+1}</td><td>${s.name}</td><td>${s.category}</td><td>${score}</td></tr>`;
  }).join('');
  // team leaderboard overall
  const overall=[...pts.teamTotals.entries()].sort((a,b)=>b[1]-a[1]);
  const overallRows=overall.map(([team,score],i)=>`<tr><td>${i+1}</td><td>${team}</td><td>${score}</td></tr>`).join('');
  q('teamScoreResults').innerHTML=`
    <div class="right-actions no-print"><button class="btn" onclick="window.print()">Print/Save PDF</button></div>
    <h3>Results & Scoreboards</h3>
    <div class="grid cols-2">
      <div class="card">
        <h4>Your team ‚Äî Top competitors</h4>
        <table><thead><tr><th>#</th><th>Name</th><th>Category</th><th>Points</th></tr></thead>
          <tbody>${rows||'<tr><td colspan="4" class="muted">No points yet</td></tr>'}</tbody>
        </table>
      </div>
      <div class="card">
        <h4>Overall Team Leaderboard</h4>
        <table><thead><tr><th>#</th><th>Team</th><th>Points</th></tr></thead>
          <tbody>${overallRows||'<tr><td colspan="3" class="muted">No points yet</td></tr>'}</tbody>
        </table>
      </div>
    </div>
  `;
}

function teamRenderData(){
  const t=session.team;
  q('teamData').innerHTML=`
    <h3>Data I/O</h3>
    <div class="grid cols-2">
      <div class="card">
        <h4>Export</h4>
        <p class="note">Exports only your roster and your registrations.</p>
        <button class="btn" id="t_export">Export JSON</button>
      </div>
      <div class="card">
        <h4>Import</h4>
        <p class="note">Merge your roster and registrations. Quotas and rules still apply.</p>
        <button class="btn warning" id="t_import">Import JSON</button>
      </div>
    </div>
  `;
  q('t_export').onclick=()=>{
    const data={
      team:t,
      students:Object.values(db.students).filter(s=>s.team===t),
      registrations:Object.fromEntries(Object.entries(db.registrations).map(([cid,rec])=> [cid, (rec.teamParticipants?.[t]||[])])),
      exportedAt:now()
    };
    download(`${t}_team_export.json`, JSON.stringify(data,null,2));
  };
  q('t_import').onclick=()=>openFile('application/json',(file,text)=>{
    try{
      const data=JSON.parse(text);
      if(data.team && data.team!==t) return alert('This file is not for your team');
      if(!confirm('Import for your team?')) return;
      (data.students||[]).forEach(s=>{
        if(!Object.values(db.students).some(x=>x.chest===s.chest)){
          const r=addStudent(t, s.chest, s.name, s.category);
          if(!r.ok) console.warn('Skip student', s.chest, r.msg);
        }
      });
      for(const [cid, list] of Object.entries(data.registrations||{})){
        const comp=getCompetitionById(cid); if(!comp) continue;
        list.forEach(sid=>{
          if(db.students[sid] && db.students[sid].team===t){
            registerStudentToCompetition(t, sid, cid);
          }
        });
      }
      alert('Imported');
      teamRenderRoster(); teamRenderRegister(); teamRenderParticipationList();
    }catch(e){ alert('Invalid JSON'); }
  });
}

/* ========= Routing / Initial ========= */
function routeToLogin(){
  q('loginView').classList.remove('hidden');
  q('adminView').classList.add('hidden');
  q('teamView').classList.add('hidden');
}

/* ========= Events ========= */
q('loginBtn').onclick=()=>tryLogin(q('loginId').value.trim(), q('loginPw').value.trim());
q('prefillAdmin').onclick=()=>{ q('loginId').value=db.auth.admin.id; q('loginPw').value=db.auth.admin.password; };
q('prefillQar').onclick=()=>{ q('loginId').value=db.auth.teams['Qarawiyyin'].id; q('loginPw').value=db.auth.teams['Qarawiyyin'].password; };
q('prefillQaz').onclick=()=>{ q('loginId').value=db.auth.teams['Qazwiyyin'].id; q('loginPw').value=db.auth.teams['Qazwiyyin'].password; };
q('logoutBtn').onclick=logout;
q('themeToggle').onclick=()=> applyTheme( document.body.getAttribute('data-theme')==='dark' ? 'light':'dark' );

/* ========= Start ========= */
loadDB();
routeToLogin();
</script>
</body>
</html>
